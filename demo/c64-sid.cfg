FEATURES {
    STARTADDRESS: default = $0801;
}

SYMBOLS {
    __LOADADDR__:  type = import;
    __EXEHDR__:    type = import;
    __STACKSIZE__: type = weak, value = $0800; # 2k stack
    __HIMEM__:     type = weak, value = $8000;
}

MEMORY {
    ZP:       file = "", define = yes, start = $0002, size = $001A;
    LOADADDR: file = %O, start = %S - 2, size = $0002;
    HEADER:   file = %O, define = yes, start = %S, size = $000D;

    LOWMAIN:  file = %O, define = yes, start = __HEADER_LAST__, size = $1000 - __HEADER_LAST__, fill = yes;
    SIDFILE:  file = %O, define = yes, start = $1000, size = $1000, fill = yes;

    MAIN:     file = %O, define = yes, start = $2000, size = $2FFF;  # $2000–$4FFF
    BITMAP:   file = %O, define = yes, start = $5000, size = $1F00;  # $5000–$6EFF

    BSS:      file = "", start = __ONCE_RUN__, size = __HIMEM__ - __STACKSIZE__ - __ONCE_RUN__;
    VICBANK:  file = %O, start = $8000, size = $4000;
}

SEGMENTS {
    ZEROPAGE: load = ZP, type = zp;
    LOADADDR: load = LOADADDR, type = ro;
    EXEHDR:   load = HEADER, type = ro;

    STARTUP:  load = LOWMAIN, type = ro;
    LOWCODE:  load = LOWMAIN, type = ro, optional = yes;
    SIDFILE:  load = SIDFILE, type = ro, optional = yes;

    CODE:     load = MAIN, type = ro;
    RODATA:   load = MAIN, type = ro;
    DATA:     load = MAIN, type = rw;
    INIT:     load = MAIN, type = rw;
    ONCE:     load = MAIN, type = ro, define = yes;

    BITMAP:   load = BITMAP, type = ro, optional = yes;
    BSS:      load = BSS, type = bss, define = yes;
    VICBANK:  load = MAIN, type = ro, optional = yes;
}

FEATURES {
    CONDES: type = constructor, label = __CONSTRUCTOR_TABLE__, count = __CONSTRUCTOR_COUNT__, segment = ONCE;
    CONDES: type = destructor, label = __DESTRUCTOR_TABLE__, count = __DESTRUCTOR_COUNT__, segment = RODATA;
    CONDES: type = interruptor, label = __INTERRUPTOR_TABLE__, count = __INTERRUPTOR_COUNT__, segment = RODATA, import = __CALLIRQ__;
}
