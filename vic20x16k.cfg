SYMBOLS {
    __LOADADDR__:  type = import;
    __EXEHDR__:    type = import;
    __STACKSIZE__: type = weak, value = $0100;
#Start of a stub in ZP to load some program code.
    __ZP2START__:  type = weak, value = $001C;
}
MEMORY {
    ZP:       file = "", define = yes, start = $0002, size = $001A;
    LOADADDR: file = %O,               start = $11FF, size = $0002;
    HEADER:   file = %O,               start = $1201, size = $000C;
    MAIN:     file = %O, define = yes, start = $120D, size = $4DF3 - __STACKSIZE__;
#Buffer in the BASIC input buffer
    BASIN:    file = "stub1.prg",
			define = yes, start = $01FE, size = $5A;	# 90 bytes
#RS232 and some BASIC data:
    RS232:    file = "stub2.prg",
			define = yes, start = $0295, size = $0314-$0295;#127 bytes
#Tape buffer and data:
    TAPE:    file = "stub3.prg",
			define = yes, start = $0332, size = $0400-$0332;#206 bytes
#Available ZP space that otherwise might not be used by a cc65 program.
    ZP2BUF:  file = "stub4.prg", 
			define = yes, start = __ZP2START__-2,
			size = $0090-__ZP2START__+2;		#116 bytes default
}

SEGMENTS {
    ZEROPAGE: load = ZP,       type = zp;
    LOADADDR: load = LOADADDR, type = ro;
    EXEHDR:   load = HEADER,   type = ro;
    STARTUP:  load = MAIN,     type = ro;
    LOWCODE:  load = MAIN,     type = ro,  optional = yes;
    ONCE:     load = MAIN,     type = ro,  optional = yes;
    CODE:     load = MAIN,     type = ro;
    RODATA:   load = MAIN,     type = ro;
    DATA:     load = MAIN,     type = rw;
    INIT:     load = MAIN,     type = bss;
    BSS:      load = MAIN,     type = bss, define   = yes;
    BASINSTART:load = BASIN,   type = ro;
    BASINCODE: load = BASIN,   type = ro;
    RS232START:load = RS232,   type = ro;
    RS232CODE: load = RS232,   type = ro;
    TAPESTART: load = TAPE,    type = ro;
    TAPECODE:  load = TAPE,    type = ro;
    ZP2START:  load = ZP2BUF,  type = ro;
    ZP2CODE:   load = ZP2BUF,  type = ro;
}
FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
